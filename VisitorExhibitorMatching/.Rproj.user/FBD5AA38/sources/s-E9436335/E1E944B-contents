
## PURPOSE : THIS IS TO IDENTIFY THE SIMILAR PEOPLE THAT REGISTERED BOTH IN ARABHEALTH 2018 AND MEDLAB 2018
## CREATION DATE : 2/19/2018
## LAST UPDATE : 
## VERSION : 1
## AUTHOR : GREJELL SEGURA


## CHECK IF PACKAGES REQUIRED WERE INSTALLED IN R
rm(list = ls())
depends <- c("tidyverse", "data.table")
pkgs <- rownames(installed.packages())

for(d in depends){
	if(!(d %in% pkgs)){
		install.packages(d)
	}
}

library(tidyverse)
library(data.table)
library(combinat)
library(gtools)

####### ####### ####### ####### ####### ####### ####### ####### ####### ####### 
## LOAD THE ARABHEALTH 2018 DATA
ahRawData <- fread("./dta/arabhealth.csv", colClasses = "character")
ahData <- setDT(ahRawData)
str(ahData)
names(ahData)
ahData <- ahData[,c(3,4,5,7,14,18,19)]

ahData[] <- lapply(ahData[], function(x) gsub("[^A-z0-9]", "", x))  ## REMOVE NON-LETTER AND NON-INTEGER CHARACTERS

ahData[] <- lapply(ahData, tolower)
ahData[] <- lapply(ahData, function(x) gsub("^$", NA, x)) ## REPLACE BLANKS WITH NA

ahnames <- tolower(names(ahData))
ahnames[] <- lapply(ahnames, function(x) gsub(" ", "", x)) ## REPLACE BLANKS WITH NA
ahnames <- as.vector(unlist(ahnames))
names(ahData) <- ahnames

naCount <- rowSums(is.na(ahData)) # count NAs per row
ahData <- setDT(ahData[naCount < 5, ]) # remove rows that has > 4 entries
ahData[is.na(ahData)] <- ""   # replace NAs with blanks

####### ####### ####### ####### ####### ####### ####### ####### ####### ####### 
## LOAD THE MEDLAB 2018 DATA
mlRawData <- fread("./dta/medlab.csv", colClasses = "character")
mlData <- setDT(mlRawData)
str(mlData)

mlData <- mlData[,c(3,4,5,7,14,18,19)]

mlData[] <- lapply(mlData[], function(x) gsub("[^A-z0-9]", "", x))  ## REMOVE NON-LETTER AND NON-INTEGER CHARACTERS

mlData[] <- lapply(mlData, tolower)
mlData[] <- lapply(mlData, function(x) gsub("^$", NA, x)) ## REPLACE BLANKS WITH NA

mlnames <- tolower(names(mlData))
mlnames[] <- lapply(mlnames, function(x) gsub(" ", "", x)) ## REPLACE BLANKS WITH NA
mlnames <- as.vector(unlist(mlnames))
names(mlData) <- mlnames

naCount <- rowSums(is.na(mlData)) # count NAs per row
mlData <- setDT(mlData[naCount < 5, ]) # remove rows that has > 4 entries
mlData[is.na(mlData)] <- ""  # replace NAs with blanks


####### ####### ####### ####### ####### ####### ####### ####### ####### ####### 
## create permutation / combination of names
listcombi <- data.frame()
for (i in c(1:length(ahnames))) {
		combi <- combn(ahnames, m = i)
		combi <- as.data.frame(combi)
		combi <- as.data.frame(t(combi))
		listcombi <- smartbind(listcombi, combi)
		listcombi <- unique(listcombi)
	}


listcombi <- listcombi[-c(1:6),] ## remove single combination except for email



####### ####### ####### ####### ####### ####### ####### ####### ####### ####### 
## create a concatenate function ##
concatenate <- function(data){
		for (j in (1:nrow(listcombi))){
		c <- unname(unlist(listcombi[j, ]))
		c <- c[!is.na(c)]
		combiname <- paste("combi", j, collapse = "")
		data[, (combiname) := apply(data[, c, with = FALSE], 1, paste, collapse = ""), with = FALSE]
		}
	}

concatenate(data = ahData)
concatenate(data = mlData)


####### ####### ####### ####### ####### ####### ####### ####### ####### ####### 



####### ####### ####### ####### ####### ####### ####### ####### ####### ####### 

	
## combi1
x <- ingoData[, "combi1"]
x <- unique(x)
y <- unique(dbmsData_2[ , c("id", "combi1")])
y[, seq := seq(.N), by = combi1]
y <- y[seq == 1, ]
z <- merge(x, y, by = "combi1")
z <- unique(z[combi1 != " ", c("combi1", "id")])

ingoData <- merge(ingoData, z, by = "combi1", all.x = TRUE)
ingoData$id1 <- ingoData$id
ingoData <- ingoData[, -c("combi1", "id")]


## combi2
x <- ingoData[, "combi2"]
x <- unique(x)
y <- unique(dbmsData_2[ , c("id", "combi2")])
y[, seq := seq(.N), by = combi2]
y <- y[seq == 1, ]
z <- merge(x, y, by = ("combi2"))
z <- unique(z[combi2 != " ", c("combi2", "id")])

ingoData <- merge(ingoData, z, by = ("combi2"), all.x = TRUE)
ingoData$id2 <- ingoData$id
ingoData <- ingoData[, -c("combi2", "id")]



## combi3
x <- ingoData[, "combi3"]
x <- unique(x)
y <- unique(dbmsData_2[ , c("id", "combi3")])
y[, seq := seq(.N), by = combi3]
y <- y[seq == 1, ]
z <- merge(x, y, by = ("combi3"))
z <- unique(z[combi3 != " ", c("combi3", "id")])

ingoData <- merge(ingoData, z, by = ("combi3"), all.x = TRUE)
ingoData$id3 <- ingoData$id
ingoData <- ingoData[, -c("combi3", "id")]


## combi4
x <- ingoData[, "combi4"]
x <- unique(x)
y <- unique(dbmsData_2[ , c("id", "combi4")])
y[, seq := seq(.N), by = combi4]
y <- y[seq == 1, ]
z <- merge(x, y, by = ("combi4"))
z <- unique(z[combi4 != " ", c("combi4", "id")])

ingoData <- merge(ingoData, z, by = ("combi4"), all.x = TRUE)
ingoData$id4 <- ingoData$id
ingoData <- ingoData[, -c("combi4", "id")]

## combi5
x <- ingoData[, "combi5"]
x <- unique(x)
y <- unique(dbmsData_2[ , c("id", "combi5")])
y[, seq := seq(.N), by = combi5]
y <- y[seq == 1, ]
z <- merge(x, y, by = ("combi5"))
z <- unique(z[combi5 != " ", c("combi5", "id")])

ingoData <- merge(ingoData, z, by = ("combi5"), all.x = TRUE)
ingoData$id5 <- ingoData$id
ingoData <- ingoData[, -c("combi5", "id")]


## combi6
x <- ingoData[, "combi6"]
x <- unique(x)
y <- unique(dbmsData_2[ , c("id", "combi6")])
y[, seq := seq(.N), by = combi6]
y <- y[seq == 1, ]
z <- merge(x, y, by = ("combi6"))
z <- unique(z[combi6 != " ", c("combi6", "id")])

ingoData <- merge(ingoData, z, by = ("combi6"), all.x = TRUE)
ingoData$id6 <- ingoData$id
ingoData <- ingoData[, -c("combi6", "id")]


## combi7
x <- ingoData
y <- unique(dbmsData_2[ , c("id", "combi7")])
y[, seq := seq(.N), by = combi7]
y <- y[seq == 1, ]
z <- merge(x, y, by = ("combi7"))
z <- unique(z[combi7 != " ", c("combi7", "id")])

ingoData <- merge(ingoData, z, by = ("combi7"), all.x = TRUE)
ingoData$id7 <- ingoData$id
ingoData <- ingoData[, -c("combi7", "id")]

## combi8
x <- ingoData
y <- unique(dbmsData_2[ , c("id", "combi8")])
y[, seq := seq(.N), by = combi8]
y <- y[seq == 1, ]
z <- merge(x, y, by = ("combi8"))
z <- unique(z[combi8 != " ", c("combi8", "id")])

ingoData <- merge(ingoData, z, by = ("combi8"), all.x = TRUE)
ingoData$id8 <- ingoData$id
ingoData <- ingoData[, -c("combi8", "id")]


## combi9
x <- ingoData
y <- unique(dbmsData_2[ , c("id", "combi9")])
y[, seq := seq(.N), by = combi9]
y <- y[seq == 1, ]
z <- merge(x, y, by = ("combi9"))
z <- unique(z[combi9 != " ", c("combi9", "id")])

ingoData <- merge(ingoData, z, by = ("combi9"), all.x = TRUE)
ingoData$id9 <- ingoData$id
ingoData <- ingoData[, -c("combi9", "id")]



## combi10
x <- ingoData
y <- unique(dbmsData_2[ , c("id", "combi10")])
y[, seq := seq(.N), by = combi10]
y <- y[seq == 1, ]
z <- merge(x, y, by = ("combi10"))
z <- unique(z[combi10 != " ", c("combi10", "id")])

ingoData <- merge(ingoData, z, by = ("combi10"), all.x = TRUE)
ingoData$id10 <- ingoData$id
ingoData <- ingoData[, -c("combi10", "id")]



## combi11
x <- ingoData
y <- unique(dbmsData_2[ , c("id", "combi11")])
y[, seq := seq(.N), by = combi11]
y <- y[seq == 1, ]
z <- merge(x, y, by = ("combi11"))
z <- unique(z[combi11 != " ", c("combi11", "id")])

ingoData <- merge(ingoData, z, by = ("combi11"), all.x = TRUE)
ingoData$id11 <- ingoData$id
ingoData <- ingoData[, -c("combi11", "id")]



######################################################################


## CONDITIONS AND RESTRICTIONS ##
ingoData_3 <- ingoData

## for ids

ingoData$id <- ifelse(!(is.na(ingoData$id1)), ingoData$id1,
                			ifelse(!(is.na(ingoData$id2)), ingoData$id2,
                			       ifelse(!(is.na(ingoData$id3)), ingoData$id3,
                			              ifelse(!(is.na(ingoData$id4)), ingoData$id4,
                			                     ifelse(!(is.na(ingoData$id5)), ingoData$id5,
                			                            ifelse(!(is.na(ingoData$id6)), ingoData$id6,
                			                                   ifelse(!(is.na(ingoData$id7)), ingoData$id7,
                			                                          ifelse(!(is.na(ingoData$id8)), ingoData$id8,
                			                                                 ifelse(!(is.na(ingoData$id9)), ingoData$id9,
                			                                                        ifelse(!(is.na(ingoData$id10)), ingoData$id10,
                			                                                               ifelse(!(is.na(ingoData$id11)), ingoData$id11, "No Match")
                			                                                               )
                			                                                        )
                			                                                 )
                			                                          )
                			                                   )
                			                            )
                			                     )
                			              )
                			       )
                			)

ingoData <- ingoData[,  c("name", "surname", "company", "position", "email", "source", "id")]


## CREATE A TABLE FOR ATTENDANCE AND ID ##
db <- unique(dbmsData_2[, c("id", "attended")])
db[, seq := seq(.N), by = id]
db <- db[seq == 1, ]
db <- db[, c("id", "attended")]


## MERGE TO IDENTIFY THE ATTENDEES ##

ingoDataFinal <- merge(ingoData, db, by = "id", all.x = TRUE)

write.csv(ingoDataFinal ,"C:/Users/Grejell/Documents/Data Analysis/Automation Project/InGo_Report/dta/output/ingo_matching_final.csv", row.names = FALSE)
rm(list = ls())